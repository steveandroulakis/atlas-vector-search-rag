from pymongo import MongoClient
from langchain_openai import OpenAIEmbeddings
from langchain.vectorstores import MongoDBAtlasVectorSearch
from langchain.document_loaders import DirectoryLoader
from langchain.llms import OpenAI
from langchain.chains import RetrievalQA
import gradio as gr
from gradio.themes.base import Base
import key_param

client: MongoClient = MongoClient(key_param.MONGO_URI)
dbName = "langchain_demo"
collectionName = "collection_of_text_blobs"
collection = client[dbName][collectionName]

# Define the text embedding model
 
embeddings = OpenAIEmbeddings(
    model="text-embedding-ada-002",  # Specify the desired model
    # dimensions=1024  # Optional: specify dimensions if supported by the model
)

# Initialize the Vector Store

vectorStore = MongoDBAtlasVectorSearch(
    collection=collection,
    embedding=embeddings,
    index_name="default",
    text_key="text",
    embedding_key="embedding"
)

print("Vector Store Details:")
print(f"Collection name: {vectorStore._collection.full_name}")
print(f"Index name: {vectorStore._index_name}")
print(f"Text key: {vectorStore._text_key}")
print(f"Embedding key: {vectorStore._embedding_key}")

def query_data(query):
    print(f"\nSearching for: {query}")
    
    # First, try the similarity search and print results
    docs = vectorStore.similarity_search(query, K=10)  # Increased K to see more results
    print(f"Number of similarity search results: {len(docs)}")
    
    if len(docs) == 0:
        print("No documents found in similarity search!")
        return "No similar documents found", "No RAG output generated"
    
    # Print found documents for debugging
    for i, doc in enumerate(docs):
        print(f"\nSimilar Document {i+1}:")
        print(f"Content: {doc.page_content[:200]}...")  # Print first 200 chars
        print(f"Metadata: {doc.metadata}")
    
    as_output = docs[0].page_content
    
    try:
        # Set up LLM
        llm = OpenAI(openai_api_key=key_param.openai_api_key, temperature=0)
        
        # Get retriever
        retriever = vectorStore.as_retriever()
        
        # Set up QA chain
        qa = RetrievalQA.from_chain_type(llm, chain_type="stuff", retriever=retriever)
        
        # Execute the chain
        print("\nExecuting RAG chain...")
        retriever_output = qa.run(query)
        print(f"RAG Output generated: {retriever_output[:200]}...")  # Print first 200 chars
        
        return as_output, retriever_output
        
    except Exception as e:
        print(f"Error in RAG processing: {str(e)}")
        return as_output, f"Error in RAG processing: {str(e)}"

# Create a web interface for the app, using Gradio

def test_vector_search():
    # Get a real embedding to test with
    test_text = "team"
    test_embedding = embeddings.embed_query(test_text)
    print(f"Test embedding length: {len(test_embedding)}")
    
    # Try direct MongoDB search with actual embedding
    pipeline = [
        {
            "$search": {
                "index": "default",
                "knnBeta": {
                    "vector": test_embedding,
                    "path": "embedding",
                    "k": 5
                }
            }
        }
    ]
    
    try:
        results = list(collection.aggregate(pipeline))
        print(f"\nDirect vector search results: {len(results)}")
        if results:
            for r in results:
                print(f"Found: {r.get('text')}")
    except Exception as e:
        print(f"Search error: {str(e)}")
        
    # Check index details
    try:
        indexes = collection.list_indexes()
        print("\nCollection indexes:")
        for idx in indexes:
            print(f"Index: {idx}")
    except Exception as e:
        print(f"Index listing error: {str(e)}")

def verify_embeddings():
    sample_docs = collection.find().limit(3)
    for doc in sample_docs:
        emb = doc.get('embedding', [])
        print(f"\nDocument ID: {doc['_id']}")
        print(f"Embedding length: {len(emb)}")
        print(f"First few values: {emb[:5]}")
        print(f"Are all values float?: {all(isinstance(x, float) for x in emb)}")

test_vector_search()
verify_embeddings()

with gr.Blocks(theme=Base(), title="Question Answering App using Vector Search + RAG") as demo:
    gr.Markdown(
        """
        # Question Answering App using Atlas Vector Search + RAG Architecture
        """)
    textbox = gr.Textbox(label="Enter your Question:")
    with gr.Row():
        button = gr.Button("Submit", variant="primary")
    with gr.Column():
        output1 = gr.Textbox(lines=1, max_lines=10, label="Output with just Atlas Vector Search (returns text field as is):")
        output2 = gr.Textbox(lines=1, max_lines=10, label="Output generated by chaining Atlas Vector Search to Langchain's RetrieverQA + OpenAI LLM:")

# Call query_data function upon clicking the Submit button

    button.click(query_data, textbox, outputs=[output1, output2])

demo.launch()
